buildscript {
    ext {
        // plugins
        projectName = 'wifiobs'
        projectBaseUrl = 'http://api.wifiobs.store:8080'
        projectVersion = '1.0.1'
        springBootVersion = '2.7.5'
        dependencyManagementVersion = '1.0.15.RELEASE'
        spotlessVersion = '6.8.0'
        asciidoctorVersion = '3.3.2'
        epagesRestDocsApiSpecVersion = '0.16.0'
        sonarqubeVersion = '4.0.0.2929'
        set('springCloudVersion', "2021.0.1")

        // dependencies
        flywayVersion = '9.16.0'
        apacheCommonsLangVersion = '3.12.0'
        apacheCommonsCollectionsVersion = '4.4'
        quartzVersion = '2.3.0'
        jsonwebtokenVersion = '0.11.5'
    }
}

plugins {
    id 'java'
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version "${dependencyManagementVersion}"

    id "com.diffplug.spotless" version "${spotlessVersion}"

    // code-quality plugins
    id 'org.asciidoctor.jvm.convert' version "${asciidoctorVersion}"
    id 'com.epages.restdocs-api-spec' version "${epagesRestDocsApiSpecVersion}"
    id "org.sonarqube" version "${sonarqubeVersion}"
    id 'jacoco'
}

apply from: './tasks/install-git-hooks.gradle'

allprojects {
    apply plugin: 'com.diffplug.spotless'
    apply from: rootProject.rootDir.toString() + '/tasks/formatting-task.gradle'

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply from: rootProject.rootDir.toString() + '/tasks/code-quality-task.gradle'

    group = 'com.wifi.observer'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '11'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    allprojects {}

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    dependencies {

        implementation 'org.springframework.boot:spring-boot-starter-validation'

        // lombok
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        // apache commons
        implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
        implementation "org.apache.commons:commons-collections4:${apacheCommonsCollectionsVersion}"

        // test
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testCompileOnly 'org.projectlombok:lombok'
        testAnnotationProcessor 'org.projectlombok:lombok'
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        finalizedBy jacocoTestReport
    }
}
